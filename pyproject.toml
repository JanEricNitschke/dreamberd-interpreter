[tool.poetry]
name        = "dreamberd"
version     = "0.1.1"
description = "An interpreter for the perfect programming language, DreamBerd."
readme      = "README.md"
authors     = ["Vivaan Singhvi <singhvi.vivaan@gmail.com>"]

[tool.poetry.dependencies]
python   = "^3.10"
pynput   = "1.7.6"
pygithub = "2.2.0"
requests = "2.31.0"
pyright  = "^1.1.384"
pylint   = "^3.3.1"

[tool.poetry.scripts]
dreamberd = "dreamberd:main"

[tool.poetry.extras]
input   = ["pynput"]
globals = ["pygithub"]

[tool.poetry.group.dev.dependencies]
pre-commit = "^4.0.1"
typing-extensions = "^4.12.2"

[build-system]
requires      = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "docs",
    "doc",
    "tests/test_pymend/refs",
    "*.html",
]

# Same as Black.
line-length = 88

# Assume Python 3.10.
target-version = "py310"

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["ALL"]
# COM messes with black
# PTH is too much work, will enable when it can autofix
# Same for FA
ignore = [
    # Due to formatter conflict
    "COM812",
    "ISC001",
    "C901",   # Do not like
    "ANN101", # Super stupid rule
    "FA100",  # I do not like the import
    "PERF",   # False positives and no real benefit
    "D",      # Too much work for now
    "ANN",
    "PLR0912",
    "PLR0911",
    "PLR0915",
    "E501",   # Fine for comments
    "T201",   # Leave my prints be
]
# ignore = ["ANN101", "COM", "FA", "PTH", "C901", "PERF"]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"


[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401"]

[tool.ruff.lint.pydocstyle]
convention = "numpy" # Accepts: "google", "numpy", or "pep257".

[tool.ruff.lint.pylint]
max-args = 10

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false


[tool.coverage.run]
branch = true
source = ["dreamberd"]

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.pyright]
include                            = ["dreamberd"]
exclude                            = ["tests", "dreamberd/serialize.py"]
typeCheckingMode                   = "strict"
strictListInference                = true
strictDictionaryInference          = true
reportDeprecated                   = "warning"
reportPropertyTypeMismatch         = "error"
reportFunctionMemberAccess         = "error"
reportMissingTypeStubs             = "error"
reportUntypedFunctionDecorator     = "error"
reportUntypedClassDecorator        = "error"
reportUntypedBaseClass             = "error"
reportUntypedNamedTuple            = "error"
reportPrivateUsage                 = "error"
reportConstantRedefinition         = "none"
reportOverlappingOverload          = "error"
reportMissingParameterType         = "error"
reportUnnecessaryIsInstance        = "none"
reportUnnecessaryCast              = "error"
reportUnnecessaryComparison        = "error"
reportUnnecessaryContains          = "error"
reportAssertAlwaysTrue             = "error"
reportUnnecessaryTypeIgnoreComment = "error"
reportImplicitOverride             = "error"
reportShadowedImports              = "error"

[tool.pylint.main]
# Specify a score threshold under which the program will exit with error.
fail-under = 10.0

[tool.pylint.basic]
# Good variable names which should always be accepted, separated by a comma.
good-names          = ["i", "j", "k", "ex", "Run", "_", "x", "y", "z", "e", "ok"]
include-naming-hint = true
typevar-rgx         = "^_{0,2}(?!T[A-Z])([A-Z]|T[0-9]?)(?:[A-Z]*[0-9]*)?(?:_co(?:ntra)?)?$"

[tool.pylint.design]
# Maximum number of arguments for function / method.
max-args = 10

# Maximum number of attributes for a class (see R0902).
# Should be lowered to 7 but got no time for that atm
max-attributes = 15

# Maximum number of boolean expressions in an if statement (see R0916).
max-bool-expr = 5

# Maximum number of branch for function / method body.
# Same as for max-attributes
max-branches = 12

# Maximum number of locals for function / method body.
# Same as for max-attributes
max-locals = 15

# Maximum number of public methods for a class (see R0904).
max-public-methods = 20

# Maximum number of return / yield for function / method body.
max-returns = 6

# Maximum number of statements in function / method body.
max-statements = 60

# Minimum number of public methods for a class (see R0903).
# Same as for max-attributes
min-public-methods = 2

[tool.pylint.exceptions]
# Exceptions that will emit a warning when caught.
overgeneral-exceptions = ["builtins.BaseException"]

[tool.pylint.format]
# Maximum number of characters on a single line.
max-line-length = 88

# Maximum number of lines in a module.
max-module-lines = 2000

[tool.pylint."messages control"]
# Only show warnings with the listed confidence levels. Leave empty to show all.
# Valid levels: HIGH, CONTROL_FLOW, INFERENCE, INFERENCE_FAILURE, UNDEFINED.
confidence = ["HIGH", "CONTROL_FLOW", "INFERENCE", "INFERENCE_FAILURE", "UNDEFINED"]

# Disable the message, report, category or checker with the given id(s). You can
# either give multiple identifiers separated by comma (,) or put this option
# multiple times (only on the command line, not in the configuration file where
# it should appear only once). You can also use "--disable=all" to disable
# everything first and then re-enable specific checks. For example, if you want
# to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use "--disable=all --enable=classes
# --disable=W".
disable = ["unnecessary-ellipsis"] #  but needed for pyright

[tool.pylint.miscellaneous]
# List of note tags to take in consideration, separated by a comma.
notes = ["FIXME", "XXX", "TODO"]

[tool.pylint.refactoring]
# Maximum number of nested blocks for function / method body
max-nested-blocks = 5

# Complete name of functions that never returns. When checking for inconsistent-
# return-statements if a never returning function is called then it will be
# considered as an explicit return statement and no message will be printed.
never-returning-functions = ["sys.exit", "argparse.parse_error"]

[tool.pylint.reports]
# Python expression which should return a score less than or equal to 10. You
# have access to the variables 'fatal', 'error', 'warning', 'refactor',
# 'convention', and 'info' which contain the number of messages in each category,
# as well as 'statement' which is the total number of statements analyzed. This
# score is used by the global evaluation report (RP0004).
evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))"

[tool.pylint.similarities]
# Minimum lines number of a similarity.
min-similarity-lines = 20

[tool.pylint.spelling]
# Limits count of emitted suggestions for spelling mistakes.
max-spelling-suggestions = 4
